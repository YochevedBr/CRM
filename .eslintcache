[{"C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\index.js":"1","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\App.js":"2","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\Routes.js":"3","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\Purchases.js":"4","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\SignUp.js":"5","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\Login.js":"6","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\Reports.js":"7","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\Products.js":"8","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\Customers.js":"9","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\CustomersReports.js":"10","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\HomePage.js":"11","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\CallRecords.js":"12","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\UpdateCustomer.js":"13","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\PrintCustomer.js":"14","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\CallDetails.js":"15","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\NumOfPurchases.js":"16","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\MonthlySales.js":"17","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\PrintPurchases.js":"18","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\BootstrapNavbar.js":"19","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\AptDetails.js":"20","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\UpdateOrAddApt.js":"21","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\firebase.js":"22","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\PrintCustomersTable.js":"23","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\Call.js":"24","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\canvasjs.react.js":"25","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\AptDescription.js":"26","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\Product.js":"27","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\CustomersTable.js":"28","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\CallRecord.js":"29","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\AddCustomer.js":"30","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\AddCallRecord.js":"31","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\CustomerCallRecord.js":"32","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\Purchase.js":"33","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\Image.js":"34","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\SmallImages.js":"35","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\Location.js":"36","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\Sold.js":"37","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\Price.js":"38","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\SmallImage.js":"39","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\canvasjs.min.js":"40"},{"size":522,"mtime":1614675071240,"results":"41","hashOfConfig":"42"},{"size":260,"mtime":1615401914486,"results":"43","hashOfConfig":"42"},{"size":4075,"mtime":1615402576319,"results":"44","hashOfConfig":"42"},{"size":1801,"mtime":1615380150534,"results":"45","hashOfConfig":"42"},{"size":5102,"mtime":1615402762931,"results":"46","hashOfConfig":"42"},{"size":3977,"mtime":1615402762918,"results":"47","hashOfConfig":"42"},{"size":4633,"mtime":1615401914618,"results":"48","hashOfConfig":"42"},{"size":3281,"mtime":1615401914709,"results":"49","hashOfConfig":"42"},{"size":690,"mtime":1615401914514,"results":"50","hashOfConfig":"42"},{"size":609,"mtime":1615401914524,"results":"51","hashOfConfig":"42"},{"size":4079,"mtime":1615402065980,"results":"52","hashOfConfig":"42"},{"size":2007,"mtime":1615401914506,"results":"53","hashOfConfig":"42"},{"size":8299,"mtime":1615401914630,"results":"54","hashOfConfig":"42"},{"size":5591,"mtime":1615401914612,"results":"55","hashOfConfig":"42"},{"size":2225,"mtime":1615401914494,"results":"56","hashOfConfig":"42"},{"size":3315,"mtime":1615401914584,"results":"57","hashOfConfig":"42"},{"size":3655,"mtime":1615401914582,"results":"58","hashOfConfig":"42"},{"size":2687,"mtime":1615401914614,"results":"59","hashOfConfig":"42"},{"size":1445,"mtime":1615402033453,"results":"60","hashOfConfig":"42"},{"size":3725,"mtime":1615401981679,"results":"61","hashOfConfig":"42"},{"size":11339,"mtime":1615401914668,"results":"62","hashOfConfig":"42"},{"size":702,"mtime":1614675071237,"results":"63","hashOfConfig":"42"},{"size":1047,"mtime":1615380150522,"results":"64","hashOfConfig":"42"},{"size":1551,"mtime":1615380150466,"results":"65","hashOfConfig":"42"},{"size":2080,"mtime":1615225444250,"results":"66","hashOfConfig":"42"},{"size":4762,"mtime":1615373104430,"results":"67","hashOfConfig":"42"},{"size":2056,"mtime":1615401914725,"results":"68","hashOfConfig":"42"},{"size":9387,"mtime":1615401914537,"results":"69","hashOfConfig":"42"},{"size":1256,"mtime":1615401914503,"results":"70","hashOfConfig":"42"},{"size":4976,"mtime":1615401914492,"results":"71","hashOfConfig":"42"},{"size":7088,"mtime":1615401914490,"results":"72","hashOfConfig":"42"},{"size":1579,"mtime":1615401914510,"results":"73","hashOfConfig":"42"},{"size":2902,"mtime":1615401914616,"results":"74","hashOfConfig":"42"},{"size":378,"mtime":1615401914558,"results":"75","hashOfConfig":"42"},{"size":1015,"mtime":1615401914620,"results":"76","hashOfConfig":"42"},{"size":176,"mtime":1614675071210,"results":"77","hashOfConfig":"42"},{"size":237,"mtime":1614675071232,"results":"78","hashOfConfig":"42"},{"size":151,"mtime":1615401914588,"results":"79","hashOfConfig":"42"},{"size":429,"mtime":1615402359419,"results":"80","hashOfConfig":"42"},{"size":481136,"mtime":1615225444248,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1shr8gm",{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"144"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\index.js",[],"C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\App.js",[],"C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\Routes.js",[],"C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\Purchases.js",["182","183","184"],"import React from 'react';\r\nimport { useHistory } from \"react-router\";\r\nimport { useEffect } from \"react\";\r\nimport 'date-fns';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\n\r\n// Component to select a date to purchases report\r\nexport default function MaterialUIPickers() {\r\n  const [selectedDate, setSelectedDate] = React.useState(new Date());\r\n  const [date, setDate] = React.useState(new Date());\r\n\r\n  const history = useHistory();\r\n\r\n  // Handle with date change\r\n  const handleDateChange = (date) => {\r\n    setSelectedDate(date);\r\n    let formatDate = date.getFullYear() + '/' + \"\"+(Number(date.getMonth())+1) + '/' + date.getDate()\r\n    setDate(formatDate);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Keeps the selected date\r\n    setDate(date.getFullYear() + '/' + \"\"+(Number(date.getMonth())+1) + '/' + date.getDate())\r\n  },[]);\r\n\r\n  return (\r\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n      <Grid container justify=\"space-around\">\r\n        <KeyboardDatePicker\r\n          margin=\"normal\"\r\n          id=\"date-picker-dialog\"\r\n          label=\"Select a purchase date\"\r\n          format=\"yyyy/dd/MM\"\r\n          value={selectedDate}\r\n          onChange={handleDateChange}\r\n          KeyboardButtonProps={{\r\n            'aria-label': 'change date',\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Button \r\n        variant=\"outlined\" color=\"primary\" \r\n        onClick={ () => {\r\n          // Puts the selected date on the path url\r\n          history.push({pathname: \"/print_purchases/\" + date})\r\n          }\r\n        }>\r\n        Search\r\n      </Button>{' '}             \r\n    </MuiPickersUtilsProvider>\r\n  );\r\n}","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\SignUp.js",["185"],"C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\Login.js",["186"],"C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\Reports.js",["187","188","189","190"],"import React from \"react\"\r\nimport {ListGroup} from 'react-bootstrap';\r\nimport { withRouter } from 'react-router-dom';\r\nimport {storage} from \"./../firebase\"\r\nimport ReactLoading from 'react-loading'\r\n\r\n\r\nclass Reports extends React.Component{\r\n\r\n    constructor() {\r\n        super()\r\n        // setting all existing reports\r\n        this.state = {\r\n            customers: '',\r\n            monthly: '',\r\n            purchases: '',\r\n            sales: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        // retrieving from firebase storage images for each report\r\n        storage\r\n        .ref('/image to design/reports/customers_table.png')\r\n        .getDownloadURL()\r\n        .then((DownloadURL) => {\r\n            console.log('hello')\r\n            this.setState({customers: DownloadURL})\r\n        }).then(() => {\r\n            storage\r\n            .ref('/image to design/reports/monthly.png')\r\n            .getDownloadURL()\r\n            .then((DownloadURL) => {\r\n                this.setState({monthly: DownloadURL})\r\n            }).then(() => {\r\n                storage\r\n                .ref('/image to design/reports/purchases.png')\r\n                .getDownloadURL()\r\n                .then((DownloadURL) => {\r\n                    this.setState({purchases: DownloadURL})\r\n                }).then(() => {\r\n                    storage\r\n                    .ref('/image to design/reports/sales.jpg')\r\n                    .getDownloadURL()\r\n                    .then((DownloadURL) => {\r\n                        this.setState({sales: DownloadURL})\r\n                    })  \r\n                })\r\n            })\r\n        })        \r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n                {\r\n                    this.state.customers && this.state.purchases && this.state.monthly && this.state.sales ?\r\n                        <ListGroup className='p-4' as=\"ul\">\r\n                            <h3 className='font'> Reports </h3> \r\n                            <h5 className='font'>Here you can find diverse reports on your contribution to our company</h5> \r\n                            <ListGroup.Item className='my-3 rounded' action href={`/customers_reports`} style={{backgroundColor: '#072F5F'}}>\r\n                                <img className='oval' src={this.state.customers} style={{marginTop: '0', marginBottom: '2%'}} width='10%' rounded />\r\n                                <h5 className='font responsive' style={{color:'white', left: '0'}}>View our dedicated customers who use our servises to find their dream house</h5>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className='my-3 rounded' action href={`/purchases`} style={{backgroundColor: '#1261A0'}}>\r\n                                <img className='oval' src={this.state.purchases} style={{backgroundColor: 'white', marginTop: '0'}} width='10%' rounded />\r\n                                <br></br>\r\n                                <br></br>\r\n                                <h5 className='font responsive' style={{color:'white'}}>All sales our wonderful agents did</h5>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className='my-3 rounded' action href={`/num_of_purchases`} style={{backgroundColor: '#3895D3'}}>\r\n                                <img className='oval' src={this.state.sales} style={{backgroundColor: 'white', marginTop: '0'}} width='10%' rounded />\r\n                                <br></br>\r\n                                <br></br>\r\n                                <h5 className='font responsive' style={{color:'white'}}>Compare your achievements to other agents</h5>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className='my-3 rounded' action href={`/monthly_sales`} style={{backgroundColor: '#58CCED'}}>\r\n                                <img className='oval' src={this.state.monthly} style={{backgroundColor: 'white', marginTop: '0'}} width='10%' rounded />\r\n                                <br></br>\r\n                                <br></br>\r\n                                <h5 className='font responsive' style={{color:'white'}}>View your achievements in this year</h5>\r\n                            </ListGroup.Item>\r\n                        </ListGroup>            \r\n                    : \r\n                        <div style={{display: 'flex', justifyContent: 'center'}}>\r\n                            <ReactLoading type='bubbles' color=\"#000066\" />\r\n                        </div>\r\n                }\r\n            </>     \r\n        )\r\n    }\r\n}\r\n   \r\nexport default withRouter(Reports);","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\Products.js",["191","192"],"import React from \"react\"\r\nimport Product from \"./Product\"\r\nimport Button from '@material-ui/core/Button';\r\nimport { useHistory } from \"react-router\";\r\nimport firebase from './../firebase.js';\r\nimport {storage} from \"./../firebase\"\r\nimport { useState, useEffect } from \"react\";\r\nimport ReactLoading from 'react-loading'\r\nimport './Products.css'\r\n\r\nfunction Products(){\r\n    const history = useHistory();\r\n    const [products, setProducts] = useState([]);\r\n\r\n    const [img_instegram, setImg_instegram] = useState('');\r\n\r\n    useEffect(() => {\r\n        // for instegram icon\r\n        storage\r\n\t\t.ref('/image to design/instegram.png')\r\n\t\t.getDownloadURL()\r\n\t\t.then((DownloadURL) => {\r\n\t\t\tsetImg_instegram(DownloadURL)\r\n\t\t})\r\n\r\n        // retrieving the apartments from firestore\r\n\r\n        var db = firebase.firestore();\r\n        let allData = []\r\n        db.collection(\"products\")\r\n        .get()\r\n        .then((snapshot) => {\r\n            // for each apartment, retrieve all the related images from firebase storage\r\n            snapshot.forEach(doc => {\r\n                storage\r\n                .ref(doc.id)\r\n                .listAll()\r\n                .then((list) => {\r\n                    let fullDoc = doc.data()\r\n                    fullDoc.images = []\r\n                    list.items.forEach((imageRef) => {\r\n                        imageRef\r\n                        .getDownloadURL()\r\n                        .then((downloadURL) => {\r\n                            // savind all images for each apartment\r\n                            fullDoc.images.push(downloadURL)\r\n                            // if all apartment images were saved, add the apartment details to allData\r\n                            if (fullDoc.images.length === list.items.length){\r\n                                allData.push(fullDoc) \r\n                            }\r\n                            // if allData contains details on all the apartments, set the apartments state\r\n                            if (allData.length === snapshot.size){\r\n                                setProducts(allData)\r\n                            }    \r\n                        })\r\n                    })\r\n                })           \r\n            }); \r\n        })\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            {\r\n                products.length != 0 ?\r\n                    <div style = {{background: \"#f5f5f0\"}}>\r\n                        <br></br>\r\n                        <h3 className='font'> All Our Properties </h3>\r\n                        <br></br>\r\n                        <Button variant=\"outlined\" color=\"primary\" onClick={() => {history.push({pathname:  `/add_apt`})}}>\r\n                            Add Apartment\r\n                        </Button>\r\n                        \r\n                        <div className='wrapper' style={{margin: '5%'}}>\r\n                            {products.map((product, i) => <Product key={i} product={product} />)}\r\n                        </div>\r\n                       \r\n                    </div> \r\n                :\r\n                    <div style={{display: 'flex', justifyContent: 'center'}}>\r\n                        <ReactLoading type='bubbles' color=\"#000066\" />\r\n                    </div>\r\n            }\r\n        </>     \r\n    )\r\n}\r\n\r\n\r\nexport default Products","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\Customers.js",[],"C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\CustomersReports.js",["193"],"\r\nimport React from \"react\"\r\nimport PrintCustomersTable from \"./PrintCustomersTable\"\r\nimport\"../App.css\"\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nclass CustomersReports extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1 className='font' style={{margin:\"0 auto\"}}>Clients Report</h1>\r\n                {/* Show the customers table with button to print table */}\r\n                <PrintCustomersTable/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n   \r\nexport default withRouter(CustomersReports);\r\n\r\n","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\HomePage.js",["194"],"import React from \"react\"\r\nimport './HomePage.css'\r\nimport './GeneralStyle.css'\r\nimport $ from 'jquery';  \r\nimport Button from '@material-ui/core/Button';\r\nimport firebase from './../firebase.js';\r\nimport { storage } from \"./../firebase\"\r\nimport { useState, useEffect } from \"react\";\r\n\r\nfunction HomaPage() {\r\n\r\n\t// Agent profile\r\n\tconst [instagramIcon, setInstagramIcon] = useState('');\r\n\tconst [agentName, setAgentName] = useState('');\r\n\tconst [agentPhone, setAgentPhone] = useState('');\r\n\tconst [agentEmail, setAgentEmail] = useState('');\r\n\t\r\n\t// To open/close the form\r\n\tconst [flagToggle, setFlagToggle] = useState(false);\r\n\r\n\t// To responsivy backgroun image\r\n\tconst [, setWindowWidth] = useState(window.innerWidth);\r\n\tconst [backgroundDesktop, setBackgroundDesktop] = useState('');\r\n\tconst [backgroundMobile, setBackgroundMobile] = useState('');\r\n\tconst imageUrl = window.innerWidth >= 650 ? backgroundDesktop : backgroundMobile;\r\n\r\n\tuseEffect(() => {\r\n\t\tconst handleWindowResize = () => {\r\n\t\t\tsetWindowWidth(window.innerWidth);\r\n\t\t};\r\n\t\twindow.addEventListener('resize', handleWindowResize);\r\n\t\t\r\n\t\t// Retrive the images fron firestore storage\r\n\t\tstorage\r\n\t\t\t.ref('/image to design/logo-desktop.jpg')\r\n\t\t\t.getDownloadURL()\r\n\t\t\t.then((DownloadURL) => {\r\n\t\t\t\tsetBackgroundDesktop(DownloadURL)\r\n\t\t})\r\n\t\tstorage\r\n\t\t\t.ref('/image to design/logo-mobile.jpg')\r\n\t\t\t.getDownloadURL()\r\n\t\t\t.then((DownloadURL) => {\r\n\t\t\t\tsetBackgroundMobile(DownloadURL)\r\n\t\t})\r\n\t\t// Retriving from firebase storage the instagram image\r\n\t\tstorage\r\n\t\t\t.ref('/image to design/instegram.png')\r\n\t\t\t.getDownloadURL()\r\n\t\t\t.then((DownloadURL) => {\r\n\t\t\t\tsetInstagramIcon(DownloadURL)\r\n\t\t})\r\n\r\n\t\t// To agent profile form\r\n\t\tvar db = firebase.firestore();\r\n\t\tif(!flagToggle){\r\n\t\t\t// Opens the form\r\n\t\t\t$(\"#btnProfil\").click(function(){\r\n\t\t\t\tvar agentId = localStorage.getItem(\"agent_id\")\r\n\t\t\t\tdb.collection(\"agents\")\r\n\t\t\t\t\t.doc(agentId)\r\n\t\t\t\t\t.get()\r\n\t\t\t\t\t.then((doc) => {\r\n\t\t\t\t\t\tsetAgentEmail(doc.id)\r\n\t\t\t\t\t\tsetAgentName(doc.data().name)\r\n\t\t\t\t\t\tsetAgentPhone(doc.data().phone)\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catch((error) => {\r\n\t\t\t\t\t\tconsole.log(\"Error getting agent document:\", error);\r\n\t\t\t\t\t});\r\n\t\t\t\t$(\"#form\").toggle();\r\n\t\t\t\t// Next time on press -> close the form\r\n\t\t\t\tsetFlagToggle(true)\r\n\t\t\t})\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// Closes the form\r\n\t\t\t$(\"#form\").toggle();\r\n\t\t\tsetFlagToggle(false)\r\n\t\t}\r\n\t\t// Resize the page\r\n        return () => {            \r\n\t\t\twindow.removeEventListener('resize', handleWindowResize);      \r\n\t\t}  \r\n\r\n\t},[]);\r\n\t\r\n\treturn(\r\n\t\t<>\r\n\t\t <div className=\"App\" style={{backgroundImage: `url(${imageUrl})`}}>\r\n            <div className=\"App-content\">\t\r\n\t\t\t\t<div className='font' id= 'desc'>\r\n\t\t\t\t\t<br></br>\r\n\t\t\t\t\t<h1 className='titleHome'>CityLights</h1>\r\n\t\t\t\t\t<h3 className='description'>‏A winning combination of experts and information in real estate‏</h3>\r\n\t\t\t\t\t<h6 className='description'>The company's staff and managers are among the first line of business real estate people and have rich </h6>\r\n\t\t\t\t\t<h6 className='description'>and professional experience in accompanying and executing many and varied real estate transactions.‏</h6>\r\n\t\t\t\t</div>\r\n\t\t\t\t<form >\r\n\t\t\t\t\t<Button id=\"btnProfil\" variant=\"outlined\" color=\"primary\" style={{marginTop: \"4px\", marginLeft: \"0px\"}}>Agent Profile</Button>\r\n\t\t\t\t</form>\r\n\t\t\t\t<form class=\"font\" id=\"form\" style={{border:'4px solid  #00004d', borderStyle: 'inset', display:'none'}}>\r\n\t\t\t\t\t<div class='key'>Name:</div><div class='value'>{agentName} </div>\r\n\t\t\t\t\t<div class='key'>Email:</div><div class='value' >{agentEmail} </div>\r\n\t\t\t\t\t<div class='key'>Phone Number:</div><div class='value'>{agentPhone} </div>\r\n\t\t\t\t</form>\r\n\t\t\t\t<div className=\"social-container\">\r\n\t\t\t\t\t<h7 style={{color: '#000066'}}>Agent - interest the customer on our Instagram :) &nbsp;</h7>\r\n\t\t\t\t\t<a href=\" https://www.instagram.com/yptb_real_estate\" className=\"instagram social\">\r\n\t\t\t\t\t\t<img src={instagramIcon} alt=\"instegram\" height={30} width={30}/>\r\n\t\t\t\t\t</a>\r\n\t\t\t\t\t<br></br>\r\n\t\t\t\t\t<br></br>\r\n\t\t\t\t</div>\r\n            </div>\r\n        </div>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default HomaPage","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\CallRecords.js",["195","196","197"],"import React from \"react\"\r\nimport CallRecord from './CallRecord'\r\nimport { useState, useEffect } from \"react\";\r\nimport firebase from './../firebase.js';\r\nimport ReactLoading from 'react-loading'\r\n\r\n\r\nfunction CallRecords() {\r\n    const [calls, setCalls] = useState([]);\r\n\r\n    useEffect(() => {\r\n        // retrieving all the calls the agent did\r\n        var db = firebase.firestore();\r\n        db.collection(\"call_records\")\r\n        .where(\"agent_id\", \"==\", localStorage.getItem(\"agent_id\"))\r\n        .get()\r\n        .then((snapshot)=>{\r\n            console.log(snapshot.docs)\r\n            var callsData = [];\r\n            snapshot.forEach((doc) => {\r\n                let x = doc.data()\r\n                x.id = doc.id\r\n                console.log(x)\r\n                callsData.push(x)\r\n\r\n            });    \r\n            callsData = callsData.sort(custom_sort);\r\n            setCalls(callsData)\r\n        });\r\n    },[]);\r\n\r\n    // sort the calls by the dates \r\n    function custom_sort(a, b) {\r\n        let x = new Date(b.date).getTime()\r\n        let y = new Date(a.date).getTime()\r\n        return new Date(b.date).getTime() > new Date(a.date).getTime() ? 1 : -1\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                calls.length != 0 ?\r\n                    <div>\r\n                        <br></br>\r\n                        <h3 className='font'> Call Records </h3> \r\n                        <h5 className='font'> See your activity with our clients </h5> \r\n                        <br></br>\r\n                        <br></br>\r\n                        <div> \r\n                            {calls.map((call, i) => < CallRecord key = { i } call = { call }/>)} \r\n                        </div> \r\n                    </div>\r\n                :\r\n                    <div style={{display: 'flex', justifyContent: 'center'}}>\r\n                        <ReactLoading type='bubbles' color=\"#000066\" />\r\n                    </div>\r\n            }\r\n        </> \r\n        \r\n    )\r\n}\r\n\r\nexport default CallRecords","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\UpdateCustomer.js",[],"C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\PrintCustomer.js",[],"C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\CallDetails.js",["198","199"],"import React from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport Call from './Call'\r\nimport { useState, useEffect } from \"react\";\r\nimport firebase from './../firebase.js';\r\nimport ReactLoading from 'react-loading'\r\n\r\n\r\nfunction CallDetails(){\r\n    // the call id\r\n    const {callID} = useParams()\r\n    const [call, setCall] = useState([]);\r\n    const [agent_name, setAgent_name] = useState(\"\");\r\n    const [customerName, setCustomerName] = useState('')\r\n    let tmp_call = []\r\n    \r\n    useEffect(() => {\r\n        // retrieving the call details from firebase\r\n        var db = firebase.firestore();\r\n        db.collection(\"call_records\")\r\n        .doc(callID)\r\n        .get()\r\n        .then((doc)=>{\r\n            tmp_call = doc.data()\r\n            setCall(doc.data())\r\n        }).then(() => {\r\n            if (tmp_call !== 0){\r\n                // retrieving the client name that participated in the call\r\n                db.collection(\"customers\")\r\n                .doc(tmp_call.customer_id)\r\n                .get()\r\n                .then((doc)=>{\r\n                    if (doc.exists){\r\n                        setCustomerName(doc.data().name)\r\n                    }\r\n                })\r\n            }  \r\n        })\r\n        // retrieving the agent name that participated in the call\r\n        db.collection(\"agents\")\r\n        .doc(localStorage.getItem(\"agent_id\"))\r\n        .get()\r\n        .then((doc)=>{\r\n            setAgent_name(doc.data().name)\r\n        });\r\n    },[]);\r\n\r\n    return(\r\n        <>\r\n            {\r\n                call.length != 0 && agent_name && customerName ?\r\n                    <div>\r\n                        <h2 className='responsive' style={{textAlign:'left', marginLeft: '52px'}}>{customerName}</h2>\r\n                        <Call data={call}></Call>\r\n                        <h5 className='responsive' style={{textAlign:'left', marginLeft: '52px'}}>Agent: {agent_name}</h5>\r\n                    </div>\r\n                :\r\n                    <div style={{display: 'flex', justifyContent: 'center'}}>\r\n                        <ReactLoading type='bubbles' color=\"#000066\" />\r\n                    </div>\r\n            }\r\n        </>\r\n        \r\n    )\r\n}\r\n\r\nexport default CallDetails\r\n","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\NumOfPurchases.js",[],"C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\MonthlySales.js",["200"],"import React from \"react\"\r\nimport firebase from './../firebase.js';\r\nimport { useState, useEffect } from \"react\";\r\nimport ReactLoading from 'react-loading'\r\nimport CanvasJSReact from './../canvasjs.react'\r\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\r\n\r\nfunction MonthlySales(){\r\n    const [options, setOptions] = useState([]);\r\n\r\n    useEffect(() => {\r\n        var db = firebase.firestore();\r\n        let dataPoints = []\r\n        // initializing the amount of sales in each month\r\n        let dates = {\r\n            \"0\": 0, \r\n            \"1\": 0, \r\n            \"2\": 0, \r\n            \"3\": 0, \r\n            \"4\": 0, \r\n            \"5\": 0, \r\n            \"6\": 0, \r\n            \"7\": 0, \r\n            \"8\": 0, \r\n            \"9\": 0, \r\n            \"10\": 0, \r\n            \"11\": 0, \r\n        }\r\n        // retrieve from firebase all the sales of the current year the agent did and map them by month\r\n        db.collection(\"call_records\")\r\n        .where(\"agent_id\", \"==\", localStorage.getItem('agent_id')) \r\n        .get()\r\n        .then((calls) => {\r\n            let counter = 0\r\n            let today = new Date()\r\n            calls.forEach(call => {\r\n                // if some sale occured\r\n                if (call.data().purchased){\r\n                    // get the transaction date \r\n                    let date = new Date(call.data().date)\r\n                    // if the sale occured this year\r\n                    if (date.getUTCFullYear() == today.getUTCFullYear()){\r\n                        date = date.getUTCMonth()\r\n                        dates[date] += call.data().purchased.length\r\n                    }                    \r\n                }\r\n                counter += 1\r\n                if (counter === calls.size){\r\n                    for (const [key, value] of Object.entries(dates)) {\r\n                        let point = {\r\n                            x: new Date(today.getFullYear(), key),\r\n                            y: value,\r\n                        }\r\n                        dataPoints.push(point)\r\n                    }\r\n                }\r\n            })\r\n        }).then(() => {\r\n            // line chart \r\n            setOptions({\r\n                animationEnabled: true,\r\n                title:{\r\n                    text: \"Sales Per Month\"\r\n                },\r\n                axisX: {\r\n                    title: \"timeline\",\r\n                    valueFormatString: \"MMM\",\r\n                    interval: 1,\r\n                    intervalType: \"month\"\r\n                },\r\n                axisY: {\r\n                    title: \"Number of Sales\",\r\n                },\r\n                data: [{\r\n                    type: \"area\",\r\n                    lineThickness: 3,\r\n                    dataPoints: dataPoints\r\n                }]\r\n            })\r\n        })        \r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            {\r\n                options ?\r\n                    <div style={{alignItems: 'center', width: '85%', margin: 'auto'}}>\r\n                        <h3 className='font'>Monthly Sales</h3>\r\n                        <h5 className='font'>Here you can your sales per month</h5>\r\n                        <h5 className='font'>always strive to do better!</h5>\r\n                        <h5 className='font'>we count on you:)</h5>\r\n                        <br></br>\r\n                        <CanvasJSChart options = {options}/>\r\n                    </div> \r\n                : \r\n                    <div style={{display: 'flex', justifyContent: 'center'}}>\r\n                        <ReactLoading type='bubbles' color=\"#000066\" />\r\n                    </div>\r\n            } \r\n        </>\r\n    )\r\n}\r\n\r\nexport default MonthlySales","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\PrintPurchases.js",["201"],"import React from \"react\";\r\nimport ReactToPrint from \"react-to-print\";\r\nimport Button from '@material-ui/core/Button';\r\nimport firebase from './../firebase.js';\r\nimport Purchase from './Purchase'\r\n\r\n// The component to print\r\nclass ComponentToPrint extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedDate: window.location.pathname.substring(17),\r\n            purchases: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        // Keeps the previous call record id, in case purchase few apartments in the same call record\r\n        localStorage.setItem('prev_call_id', '')\r\n        var db = firebase.firestore();\r\n\r\n        // Retrieves list of call records in the selected date, and there was a purchase in them\r\n        db.collection(\"call_records\")\r\n        .where(\"date\", \"==\", this.state.selectedDate)\r\n        .where(\"purchased\", \"!=\", [])\r\n        .get()\r\n        .then((snapshot)=>{\r\n            // Keeps list of call records data with purchases\r\n            var purchasesData = [];\r\n            snapshot.forEach((doc) => {\r\n                let x = doc.data()\r\n                x.id = doc.id\r\n                // In case of purchased few apartments in the same call record\r\n                for(var i=0; i<x.purchased.length; i++){\r\n                    purchasesData.push(x)\r\n                }\r\n            });\r\n            \r\n            this.setState({\r\n                purchases: purchasesData\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {       \r\n        return (   \r\n            <div>\r\n                <br></br>\r\n                <div style={{textAlign:'left',paddingLeft:'50px',paddingTop:'50px', fontSize:'30px',color:'#0044cc',fontSize:'24px'}}>Purchases on: {this.state.selectedDate} </div>\r\n                <div style={{fontSize:'22px'}}></div>\r\n                <div> \r\n                    {\r\n                        // Pass data to child component\r\n                        this.state.purchases.map((purchase, i) => \r\n                        < Purchase key = { i } purchase = { purchase }/>,\r\n                    )} \r\n                </div> \r\n            </div>         \r\n        );\r\n    }\r\n}\r\n\r\n// Print the purchases report\r\nclass Print extends React.Component {     \r\n    render() {\r\n        return (\r\n            <div>    \r\n                <ReactToPrint\r\n                    trigger={() => <Button id=\"btnPrint\" variant=\"outlined\" color=\"primary\">PRINT</Button>}\r\n                    content={() => this.componentRef}\r\n                />   \r\n                <ComponentToPrint ref={el => (this.componentRef = el)} />       \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Print;\r\n","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\BootstrapNavbar.js",[],"C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\AptDetails.js",["202"],"import React from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport Button from '@material-ui/core/Button';\r\nimport AptDescription from './AptDescription'\r\nimport SmallImages from './SmallImages'\r\nimport Image from './Image'\r\nimport { useHistory } from \"react-router\";\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\nimport firebase from './../firebase.js';\r\nimport {storage} from \"./../firebase\"\r\nimport { useState, useEffect } from \"react\";\r\nimport './AptDetails.css'\r\nimport ReactLoading from 'react-loading'\r\n\r\n\r\nfunction AptDetails(){\r\n    // the apartment id\r\n    let {aptID} = useParams()\r\n \r\n    const history = useHistory()\r\n    const [data, setData] = useState([]);\r\n\r\n    useEffect(() => {  \r\n        // retrieving the apartment details\r\n        var db = firebase.firestore();\r\n        db.collection(\"products\")\r\n        .doc(aptID)\r\n        .get()\r\n        .then((doc) => {\r\n            // retrieving the images related to the apartment\r\n            storage\r\n            .ref(aptID)\r\n            .listAll()\r\n            .then((list) => {\r\n                let fullDoc = doc.data()\r\n                list.items.forEach((imageRef) => {\r\n                    imageRef\r\n                    .getDownloadURL()\r\n                    .then((downloadURL) => {\r\n                        fullDoc.images.push(downloadURL)\r\n                        if (fullDoc.images.length === list.items.length){\r\n                            fullDoc.image = fullDoc.images[0]\r\n                            setData(fullDoc);\r\n                        } \r\n                    })\r\n                })\r\n            })\r\n        });\r\n    }, []);\r\n\r\n    // when small image is clicked the big image is change to the small image\r\n    function replaceImage(src){\r\n        let dataCopy = JSON.parse(JSON.stringify(data))\r\n        dataCopy.image = src.target.src\r\n        setData(dataCopy)\r\n    }\r\n\r\n    return(\r\n        <>\r\n        {\r\n            !data.images ?\r\n                <div style={{display: 'flex', justifyContent: 'center'}}>\r\n                    <ReactLoading type='bubbles' color=\"#000066\" />\r\n                </div>\r\n            :\r\n        <div>\r\n            <Container className='no-marginLR no-padding'>\r\n                <Row className= \"rowsss\" style={{width: '100%', margin:'0'}}>\r\n                    {/*sm -for responsive */}\r\n                    <Col md={4}>\r\n                        <AptDescription class='flex-child' description={data}></AptDescription>\r\n                        <Button variant=\"outlined\" color=\"#000066\" onClick={() => {history.push({pathname:  `/update_apt/${data.id}`})}} style={{marginTop:\"5px\"}}>Edit</Button>\r\n                    </Col>\r\n                    <Col md={8} p={0} m={0}>\r\n                        <Container className=' bigimage' style={{width: '100%', padding:'0%'}}>\r\n                            <Row style={{width: '100%', pading: '3px', margin: '3px'}}>\r\n                                <Col style={{padding:'0%'}}>\r\n                                    <br></br>\r\n                                    <br></br>\r\n                                    <Image src={data.image} width={'1500'} height=\"auto\" borderRadius=\"4px\"></Image>\r\n                                </Col>\r\n                            </Row >\r\n                            <br></br>\r\n                            <Row style={{width: '100%', pading: '3px', margin: '3px'}}>\r\n                                <SmallImages replaceImage={replaceImage} images={data.images}></SmallImages>\r\n                            </Row>\r\n                        </Container>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AptDetails\r\n\r\n","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\UpdateOrAddApt.js",["203","204"],"import React, { useState, useEffect } from \"react\";\r\nimport { Container, Row, Col, Form, Button} from 'react-bootstrap';\r\nimport { useHistory } from \"react-router\";\r\nimport firebase from './../firebase';\r\nimport {storage} from \"./../firebase\"\r\nimport './UpdateOrAddApt.css'\r\nimport { useParams } from 'react-router-dom';\r\n\r\n\r\n\r\nfunction UpdateOrAddApt(){\r\n    const[price, setPrice] = useState(\"\");\r\n    const [location, setLocation] = useState(\"\");\r\n    const [floor, setFloor] = useState(\"\");\r\n    const [floors, setFloors] = useState(\"\");\r\n    const [rooms, setRooms] = useState(\"\");\r\n    const [status, setStatus] = useState(\"\")\r\n    const [pool, setPool] = useState(\"\")\r\n    const [yard, setYard] = useState(\"\")\r\n    const [porch, setPorch] = useState(\"\")\r\n    const [private_house, setPrivate] = useState(\"\")\r\n    const [sold, setSold] = useState(\"\")\r\n    const [correctDetails, setCorrectDetails] = useState(true)\r\n    const [imageAsFile, setImageAsFile] = useState([])\r\n    \r\n    const history = useHistory();\r\n    var db = firebase.firestore();\r\n    // get the id of the apartment to edit\r\n    let {aptID} = useParams()\r\n    // if there is no id, the purpose is to add new apartment\r\n    if (!aptID){\r\n        aptID = 0\r\n    }\r\n    \r\n    useEffect(() => {  \r\n        // if the purpose is to edit existing apartment \r\n        if (aptID !== 0){\r\n            // display all the existing data in the inputs form\r\n            db.collection('products')\r\n            .doc(aptID)\r\n            .get()\r\n            .then((doc) => {\r\n                if (doc.exists){\r\n                    setPrice(doc.data().price)\r\n                    setLocation(doc.data().location)\r\n                    setFloor(doc.data().floor)\r\n                    setFloors(doc.data().floors)\r\n                    setRooms(doc.data().rooms)\r\n                    setStatus(doc.data().status)\r\n                    setPool(doc.data().pool)\r\n                    setYard(doc.data().yard)\r\n                    setPorch(doc.data().porch)\r\n                    setPrivate(doc.data().private)\r\n                    setSold(doc.data().sold)\r\n                    setImageAsFile([0])\r\n                }\r\n                else{\r\n                    console.log(\"document doesn't exist\")\r\n                }\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    // marking field as checked if it was checked\r\n    function isChecked(info){\r\n        return info === 'Yes'\r\n    }\r\n\r\n    // checking that all details entered\r\n    function validateForm() {\r\n        return price.length > 0 && location.length > 0 && floor.length > 0 && floors.length > 0 && rooms.length > 0 && status.length > 0 && imageAsFile.length > 0; \r\n    }\r\n\r\n    // saving all images to imageAsFile object\r\n    const handleImageAsFile = (e) => {\r\n        const images = e.target.files\r\n        setImageAsFile(imageAsFile => (images))\r\n    }\r\n\r\n    // generating id to new apartment\r\n    let generateID = new Promise(function(myResolve, myReject){\r\n        let size = 0;\r\n        // if adding new apartment\r\n        if (aptID === 0){\r\n            db.collection('products').get().then(snap => {\r\n                size = snap.size // return the collection size\r\n                aptID = aptID + size + 1;\r\n            });\r\n        }\r\n    })\r\n\r\n    // save the new data in firebase \r\n    function saveToFirebase(){\r\n            aptID = aptID.toString()\r\n            db.collection('products').doc(aptID).set({\r\n                id: aptID,\r\n                sold: sold,\r\n                price: price,\r\n                location: location,\r\n                floor: floor,\r\n                floors: floors,\r\n                rooms: rooms,\r\n                status: status,\r\n                pool: pool,\r\n                yard: yard,\r\n                porch: porch,\r\n                private: private_house,\r\n                images: []\r\n            })\r\n            .then(() => {\r\n                if(imageAsFile === [] ) {  \r\n                    console.error(`not an image, the image file is a ${typeof(imageAsFile)}`)\r\n                }\r\n                // saving the apartment new images in firebase storage\r\n                for (let i = 0; i < imageAsFile.length; i ++){\r\n                    storage.ref(`${aptID}/${imageAsFile[i].name}`).put(imageAsFile[i])\r\n                }\r\n                \r\n                // go back to view all apartments\r\n                history.push('/products')\r\n            })\r\n            .catch((error) => {\r\n                console.error(\"Error writing document: \", error);\r\n            });\r\n    }\r\n\r\n    function handleSubmit(event) {\r\n        event.preventDefault();\r\n    \r\n        // generate id in case of new apartment\r\n        generateID\r\n        .then(\r\n            // save all the data in firebase\r\n            saveToFirebase()\r\n        )  \r\n    }\r\n\r\n \r\n    return (\r\n        \r\n        <div className=\"apt1\">\r\n        {/* <div calssName=\"apt\" style={{position: \"absolute\",top: \"70px\", alignItems: \"center\", backgroundColor: 'white', boxShadow: \"0px 0px 3px 3px #999\"}}> */}\r\n\r\n        <h6 style={{marginTop: \"5px\"}}>Apartment {aptID}</h6>\r\n        <Container>\r\n            <Row style={{width:\"100%\", margin:\"0\"}}>\r\n                <div className=\"col-sm-10\" style={{marginLeft: \"7%\"}}>\r\n                    <Form className=\"form\" onSubmit={handleSubmit}> \r\n                        <Form.Group controlId=\"formCategory1\" style={{margin: \"1px 0\"}}>\r\n                            <Form.Label style = {{float: \"left\", marginLeft: \"2%\", margin: \"0px 0\"}}>Price</Form.Label>\r\n                            <Form.Control type=\"text\" value={price} size=\"sm\"\r\n                                onChange={(e) => setPrice(e.target.value)}\r\n                            /> \r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"formCategory1\" style={{margin: \"1px 0\"}}>\r\n                            <Form.Label style = {{float: \"left\", marginLeft: \"2%\", margin: \"0px 0\"}}>Location</Form.Label>\r\n                            <Form.Control type=\"text\" value={location} size=\"sm\"\r\n                                onChange={(e) => setLocation(e.target.value)}\r\n                            /> \r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"formCategory2\" style={{margin: \"1px 0\"}}>\r\n                            <Form.Label style = {{float: \"left\", marginLeft: \"2%\", margin: \"0px 0\"}}>Floor</Form.Label>\r\n                            <Form.Control type=\"number\" value={floor} size=\"sm\" \r\n                                onChange={(e) => setFloor(e.target.value)}\r\n                            />          \r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"formCategory2\" style={{margin: \"1px 0\"}}>\r\n                            <Form.Label style = {{float: \"left\", marginLeft: \"2%\", margin: \"0px 0\"}}>Number of Floors</Form.Label>\r\n                            <Form.Control type=\"number\" value={floors} size=\"sm\"\r\n                                onChange={(e) => setFloors(e.target.value)}\r\n                            />          \r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"formCategory2\" style={{margin: \"1px 0\"}}>\r\n                            <Form.Label style = {{float: \"left\", marginLeft: \"2%\", margin: \"0px 0\"}}>Number of Rooms</Form.Label>\r\n                            <Form.Control type=\"number\" value={rooms} size=\"sm\" \r\n                                onChange={(e) => setRooms(e.target.value)}\r\n                            />          \r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"formCategory2\" style={{margin: \"1px 0\"}}>\r\n                            <Form.Label style = {{float: \"left\", marginLeft: \"2%\", margin: \"0px 0\"}}>Condition</Form.Label>\r\n                            <Form.Control type=\"text\" value={status} size=\"sm\"\r\n                                onChange={(e) => setStatus(e.target.value)}\r\n                            />          \r\n                        </Form.Group>\r\n                        <fieldset>\r\n                            <Form.Group as={Row}>\r\n                                <Col sm={2}>\r\n                                    <Form.Check\r\n                                        type=\"checkbox\"\r\n                                        label=\"pool\"\r\n                                        name=\"formHorizontalRadios\"\r\n                                        id=\"formHorizontalRadios1\"\r\n                                        defaultChecked={isChecked(pool) ? 'checked' : ''}\r\n                                        onClick={() => isChecked(pool) ? setPool('') : setPool('Yes')}\r\n                                    />  \r\n                                    <Form.Check\r\n                                        type=\"checkbox\"\r\n                                        label=\"yard\"\r\n                                        name=\"formHorizontalRadios\"\r\n                                        id=\"formHorizontalRadios2\"\r\n                                        defaultChecked={isChecked(yard) ? 'checked' : ''}\r\n                                        onClick={() => isChecked(yard) ? setYard('') : setYard('Yes')}\r\n                                    /> \r\n                                    <Form.Check\r\n                                        type=\"checkbox\"\r\n                                        label=\"porch\"\r\n                                        name=\"formHorizontalRadios\"\r\n                                        id=\"formHorizontalRadios3\"\r\n                                        defaultChecked={isChecked(porch) ? 'checked' : ''}\r\n                                        onClick={() => isChecked(porch) ? setPorch('') : setPorch('Yes')}\r\n                                    />  \r\n                                    <Form.Check\r\n                                        type=\"checkbox\"\r\n                                        label=\"private\"\r\n                                        name=\"formHorizontalRadios\"\r\n                                        id=\"formHorizontalRadios4\"\r\n                                        defaultChecked={isChecked(private_house) ? 'checked' : ''}\r\n                                        onClick={() => isChecked(private_house) ? setPrivate('') : setPrivate('Yes')}\r\n                                    />   \r\n                                </Col>     \r\n                            </Form.Group>\r\n                        </fieldset>\r\n\r\n                        <Form.Group controlId=\"formCategory2\" style={{float: \"right\", marginLeft: \"20%\"}}>\r\n                            <Form.Control \r\n                                type=\"file\" \r\n                                text=\"Select Image\"\r\n                                multiple\r\n                                onChange={handleImageAsFile}\r\n                            />          \r\n                        </Form.Group>\r\n                        <h6 style={{display: !correctDetails ? 'block' : 'none', color: 'red'}}>Please anter valid details.</h6>\r\n                        \r\n                        <Button variant=\"outlined\" color=\"primary\" type=\"submit\"disabled={!validateForm()}>{aptID ? 'Update' : 'Add' }</Button>\r\n                    </Form>\r\n                </div>\r\n            </Row>\r\n        </Container>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\n   \r\nexport default UpdateOrAddApt\r\n","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\firebase.js",[],"C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\PrintCustomersTable.js",[],"C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\Call.js",["205"],"import React from 'react'\r\n\r\n\r\nfunction Call(props){\r\n    return(\r\n        <div>\r\n            <p style={{border:'2px solid #0044cc',borderRadius: '8px', marginLeft:'50px', marginRight:'50px', borderStyle: 'inset'}}>\r\n                <div style={{display: props.data.date ? 'flex' : 'none', padding:'10px 20px 10px 20px '}} >\r\n                    <div className='p-responsive' style={{color:'#0044cc',paddingRight:'10px'}}>Date:</div><div className='p-responsive'>{props.data.date}</div>\r\n                </div>\r\n                <div style={{display: props.data.interested ? 'flex' : 'none', padding:'10px 20px 10px 20px '}}>\r\n                    <div className='p-responsive' style={{color:'#0044cc',paddingRight:'10px'}}>Interested in:</div><div className='p-responsive'>{props.data.interested}</div>\r\n                </div >\r\n                <div style={{display: props.data.purchased == [] ? 'flex' : 'none', padding:'10px 20px 10px 20px '}}>\r\n                    <div className='p-responsive' style={{color:'#0044cc',paddingRight:'10px'}}>Purchases:</div><div className='p-responsive'>{props.data.purchased ? props.data.purchased.join(', ') : props.data.purchased}</div>\r\n                </div>\r\n                <div style={{display: props.data.return ? 'flex' : 'none', padding:'10px 20px 10px 20px '}}>\r\n                    <div className='p-responsive' style={{color:'#0044cc',paddingRight:'10px'}}>Return:</div><div className='p-responsive'>Yes</div>\r\n                </div>\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Call\r\n","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\canvasjs.react.js",["206"],"﻿/*\r\nCanvasJS React Charts - https://canvasjs.com/\r\nCopyright 2021 fenopix\r\n\r\n--------------------- License Information --------------------\r\nCanvasJS is a commercial product which requires purchase of license. Without a commercial license you can use it for evaluation purposes for upto 30 days. Please refer to the following link for further details.\r\nhttps://canvasjs.com/license/\r\n\r\n*/\r\nvar React = require('react');\r\nvar CanvasJS = require('./canvasjs.min');\r\nCanvasJS = CanvasJS.Chart ? CanvasJS : window.CanvasJS;\r\n\r\nclass CanvasJSChart extends React.Component {\r\n\tstatic _cjsContainerId = 0\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.options = props.options ? props.options : {};\r\n\t\tthis.containerProps = props.containerProps ? props.containerProps : { width: \"100%\", position: \"relative\" };\r\n\t\tthis.containerProps.height = props.containerProps && props.containerProps.height ? props.containerProps.height : this.options.height ? this.options.height + \"px\" : \"400px\";\r\n\t\tthis.chartContainerId = \"canvasjs-react-chart-container-\" + CanvasJSChart._cjsContainerId++;\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\t//Create Chart and Render\t\t\r\n\t\tthis.chart = new CanvasJS.Chart(this.chartContainerId, this.options);\r\n\t\tthis.chart.render();\r\n\r\n\t\tif (this.props.onRef)\r\n\t\t\tthis.props.onRef(this.chart);\r\n\t}\r\n\tshouldComponentUpdate(nextProps, nextState) {\r\n\t\t//Check if Chart-options has changed and determine if component has to be updated\r\n\t\treturn !(nextProps.options === this.options);\r\n\t}\r\n\tcomponentDidUpdate() {\r\n\t\t//Update Chart Options & Render\r\n\t\tthis.chart.options = this.props.options;\r\n\t\tthis.chart.render();\r\n\t}\r\n\tcomponentWillUnmount() {\r\n\t\t//Destroy chart and remove reference\r\n\t\tthis.chart.destroy();\r\n\t\tif (this.props.onRef)\r\n\t\t\tthis.props.onRef(undefined);\r\n\t}\r\n\trender() {\r\n\t\t//return React.createElement('div', { id: this.chartContainerId, style: this.containerProps });\t\t\r\n\t\treturn <div id={this.chartContainerId} style={this.containerProps} />\r\n\t}\r\n}\r\n\r\nvar CanvasJSReact = {\r\n\tCanvasJSChart: CanvasJSChart,\r\n\tCanvasJS: CanvasJS\r\n};\r\n\r\nexport default CanvasJSReact;","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\AptDescription.js",["207","208","209","210","211","212","213","214","215","216","217","218"],"import React from \"react\";\r\nimport ReactToPrint from \"react-to-print\";\r\nimport Button from '@material-ui/core/Button';\r\n// import Form from 'react-bootstrap/Form'\r\n// import Row from 'react-bootstrap/Row'\r\n// import Col from 'react-bootstrap/Col'\r\nimport { Form, Row, Col, Table, Container } from 'react-bootstrap';\r\nimport { span } from 'bootstrap';\r\nimport PropTypes from \"prop-types\";\r\nimport $ from 'jquery'\r\n\r\nclass AptDescription extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // query based on the apartment id\r\n        this.state = {\r\n            description: props.description\r\n        };\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.description !== this.props.description) {\r\n            this.state.description = nextProps.description\r\n        }\r\n    }\r\n\r\n    yesOrNo(state){\r\n        return state ? 'Yes' : 'No'\r\n    }\r\n  \r\n    render() { \r\n        const style = {\r\n            color: \"DodgerBlue\",\r\n            // backgroundColor: \"DodgerBlue\",\r\n            padding: \"10px\",\r\n            paddingTop: \"10px\",\r\n            fontFamily: \"Calibri\",\r\n            textAlign: \"left\",\r\n            whiteSpace: \"nowrap\",\r\n            // display: \"none\"\r\n        }\r\n     \r\n        return (\r\n            <div style={{border: \"2px solid\", borderColor: '#000066', borderRadius: '8px', marginLeft: '0%' , marginTop: \"10%\"}}>\r\n                <div style={{textAlign:'center',paddingTop:'5%', fontSize:'24px',color:'#000066', fontFamily: \"bold\"}}>Apartment Details:</div>\r\n                <div style={{display:'flex',paddingLeft: \"40px\", paddingTop: \"15px\"}} >\r\n                    <div style={{color:'#000066',paddingRight:'10px',fontSize:'16px', fontFamily: \"bold\"}}>ID:</div><div style={{fontSize:'16px'}}>{this.state.description.id}</div>\r\n                </div>\r\n                <div style={{display:'flex',paddingLeft: \"40px\", paddingTop: \"15px\"}} >\r\n                    <div style={{color:'#000066',paddingRight:'10px',fontSize:'16px' ,fontFamily: \"bold\"}}>Location:</div><div style={{fontSize:'16px'}}>{this.state.description.location}</div>\r\n                </div>\r\n                <div style={{display:'flex',paddingLeft: \"40px\", paddingTop: \"15px\"}} >\r\n                    <div style={{color:'#000066',paddingRight:'10px',fontSize:'16px' ,fontFamily: \"bold\"}}>Floor:</div><div style={{fontSize:'16px'}}>{this.state.description.floor}</div>\r\n                </div >\r\n                <div style={{display:'flex',paddingLeft: \"40px\", paddingTop: \"15px\"}} >\r\n                    <div style={{color:'#000066',paddingRight:'10px',fontSize:'16px' ,fontFamily: \"bold\"}}>Number of Floors:</div><div style={{fontSize:'16px'}}>{this.state.description.floors}</div>\r\n                </div>\r\n                <div style={{display:'flex',paddingLeft: \"40px\", paddingTop: \"15px\"}} >\r\n                    <div style={{color:'#000066',paddingRight:'10px',fontSize:'16px' ,fontFamily: \"bold\"}}>Number of Rooms:</div><div style={{fontSize:'16px'}}>{this.state.description.rooms}</div>\r\n                </div>\r\n                <div style={{display:'flex',paddingLeft: \"40px\", paddingTop: \"15px\"}} >\r\n                    <div style={{color:'#000066',paddingRight:'10px',fontSize:'16px' ,fontFamily: \"bold\"}}>Condition:</div><div style={{fontSize:'16px'}}>{this.state.description.status}</div>\r\n                </div>\r\n                <div style={{display:'flex',paddingLeft: \"40px\", paddingTop: \"15px\"}} >\r\n                    <div style={{color:'#000066',paddingRight:'10px',fontSize:'16px' ,fontFamily: \"bold\"}}>Pool:</div><div style={{fontSize:'16px'}}>{this.yesOrNo(this.state.description.pool) }</div>\r\n                </div>\r\n                <div style={{display:'flex',paddingLeft: \"40px\", paddingTop: \"15px\"}} >\r\n                    <div style={{color:'#000066',paddingRight:'10px',fontSize:'16px', fontFamily: \"bold\"}}>Yard:</div><div style={{fontSize:'16px'}}>{this.yesOrNo(this.state.description.yard)}</div>\r\n                </div>\r\n                <div style={{display:'flex',paddingLeft: \"40px\", paddingTop: \"15px\"}} >\r\n                    <div style={{color:'#000066',paddingRight:'10px',fontSize:'16px',fontFamily: \"bold\"}}>Porch:</div><div style={{fontSize:'16px'}}>{this.yesOrNo(this.state.description.porch)}</div>\r\n                </div>\r\n                <div style={{display:'flex',paddingLeft: \"40px\", paddingTop: \"15px\"}} >\r\n                    <div style={{color:'#000066',paddingRight:'10px',fontSize:'16px', fontFamily: \"bold\"}}>Private:</div><div style={{fontSize:'16px'}}>{this.yesOrNo(this.state.description.private)}</div>\r\n                </div>\r\n                <br></br>\r\n                \r\n            </div>     \r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default AptDescription;\r\n\r\n","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\Product.js",["219","220"],"import React from 'react'\r\nimport Image from './Image'\r\nimport Location from './Location'\r\nimport Price from './Price'\r\nimport Sold from './Sold'\r\nimport './Product.css'\r\nimport { useState, useEffect } from \"react\";\r\nimport ReactLoading from 'react-loading'\r\n\r\n\r\nfunction Product(props){\r\n    const [product, setProduct] = useState({id:'', price:'', location:'',floor:'',floors:'',rooms:'',status:'',pool:'',yard:'', private_house:'', sold:'', images:[]})\r\n\r\n    useEffect(() => {\r\n        // setting the apartment details in case of update\r\n        setProduct(props.product)\r\n    }, [props]);\r\n    \r\n    return(\r\n        <>\r\n        {   \r\n            product.images ?\r\n                <div>\r\n                <div className = \"square\" key={product.id} style={{ border: \"solid 4px #e0e0d1\", background: \"#ffffff\", borderRadius: \"1%\"}}>\r\n                    <br></br>\r\n                    \r\n                    <a style={{textDecoration: 'none', color: 'black'}} href={`/apt_details/${product.id}`}>\r\n                        <Image style={{'width': '30px', 'hight': '30px'}} src={product.images[0]} />\r\n                        <h5 className='font' style={{'textIndent': \"10px\", 'textAlign': \"justify\", 'color': '#000066' }}>{product.location}</h5>\r\n                        {/* <Location class='flex-child1' location={product.location}/> */}\r\n                        <div className='flex-container' style={{'position': 'relative'}}>\r\n                            <h6 className='font' style={{'textIndent': \"10px\", 'textAlign': \"justify\", 'color': '#000066'}}>{product.price} ILS</h6>\r\n                            <Sold class='flex-child' sold={product.sold}/>\r\n                           \r\n                        </div>\r\n                    </a>\r\n                    </div>\r\n\r\n                \r\n                </div>\r\n    \r\n            : <div style={{display: 'flex', justifyContent: 'center'}}>\r\n                    <ReactLoading type='bubbles' color=\"#000066\" />\r\n                </div>\r\n        }\r\n        </>\r\n        \r\n    )\r\n}\r\n\r\nexport default Product","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\CustomersTable.js",["221","222"],"import React, { useEffect } from \"react\"\r\nimport { withRouter, useHistory } from 'react-router'\r\nimport { useTable, useFilters, useSortBy } from 'react-table';\r\nimport { Table, InputGroup, FormControl } from 'react-bootstrap';\r\nimport Button from '@material-ui/core/Button';\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport ReactLoading from 'react-loading'\r\nimport firebase from './../firebase.js';\r\n\r\nfunction CustomersTable(props) {\r\n    const reports = props.reports;    \r\n    const history = useHistory();\r\n    \r\n    const [showModal, setShow] = React.useState(false);\r\n    const [Row, setRow] = React.useState(\"\");\r\n    const [data, setData] = React.useState([]);\r\n\r\n    const [id, setId] = React.useState(\"\")\r\n    const [name, setName] = React.useState(\"\")\r\n    const [phoneNumber, setPhoneNumber] = React.useState(\"\")\r\n    const [, setEmail] = React.useState(\"\")\r\n\r\n    useEffect(() => {\r\n        if(Row != \"\"){\r\n            var db = firebase.firestore()\r\n            // Get the current id\r\n            db.collection(\"customers\").where(\"email\", \"==\", Row.email)\r\n                .get()\r\n                .then((querySnapshot) => {\r\n                    querySnapshot.forEach((doc) => {\r\n                        setId(doc.id)\r\n                        setName(doc.data().name)\r\n                        setPhoneNumber(doc.data().phoneNumber)\r\n                        setEmail(doc.data().email)                \r\n                    });\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"Error getting documents: \", error);\r\n                }); \r\n            }\r\n    },[Row]);\r\n\r\n    // Close delete modal\r\n    const handleClose = () => setShow(false)\r\n\r\n    // Open delete modal\r\n    const handleShow = (data) => {\r\n        setShow(true);\r\n        // Keeps the value of current row of the table\r\n        setRow(data)\r\n    }\r\n\r\n    // Handle with delete customer\r\n    const handleDelete = () => {\r\n        setShow(false);\r\n        var db = firebase.firestore()\r\n\r\n        // 'Delete' customer -> Changes the status\r\n        db.collection(\"customers\").doc(id).set({\r\n            name: name,\r\n            phoneNumber: phoneNumber,\r\n            email: \"\",\r\n            deleted: true\r\n        }).then(() => {\r\n            window.location.reload();\r\n        }).catch((error) => {\r\n            console.error(\"Error removing document: \", error);\r\n        });               \r\n    }\r\n\r\n    // Actions buttons for each row\r\n    const Actions = (props) =>{\r\n        var currentC = \"\"\r\n        const reports = props.reports;\r\n        const row = props.row;\r\n        var db = firebase.firestore()\r\n        db.collection(\"customers\").where(\"email\", \"==\", row.original.email)\r\n            .get()\r\n            .then((querySnapshot) => {\r\n                querySnapshot.forEach((doc) => {\r\n                    currentC = doc.id     \r\n                });\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"Error getting documents: \", error);\r\n        });  \r\n\r\n        // In case of reports show 'print' button\r\n        if(reports){\r\n            return <Button variant=\"outlined\" color=\"primary\" onClick={() =>  {history.push({pathname:  \"/print_customer/\" + currentC})}}>Print</Button>\r\n        }\r\n        // In case of not reports show 'Details' and 'Delete' buttons\r\n        else{\r\n            return(\r\n                <div>\r\n                    <Button \r\n                        variant=\"outlined\" color=\"primary\" onClick={() => {history.push({pathname: \"/update_customer/\" + currentC})}}>Details\r\n                    </Button>{' '}\r\n                    <Button \r\n                        variant=\"outlined\" color=\"primary\" onClick={() => handleShow(row.original)}>Delete\r\n                    </Button>\r\n                </div>\r\n            )\r\n        }  \r\n    }\r\n\r\n    function TextFilter({column: { filterValue, setFilter },})\r\n    { \r\n        return (\r\n            <InputGroup className=\"mb-3\">\r\n                <FormControl\r\n                    placeholder=\"Search...\"\r\n                    value={filterValue || ''}\r\n                    onChange={e => {\r\n                        setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\r\n                    }}\r\n                />\r\n            </InputGroup>\r\n        )\r\n    }\r\n        \r\n    // Gets customers data\r\n    React.useEffect(() => {\r\n        var db = firebase.firestore();\r\n        // Get all customers that exist\r\n        db.collection(\"customers\")\r\n        .where(\"deleted\", \"==\", false)\r\n        .get().then((querySnapshot) => {\r\n            var customersData = [];\r\n            querySnapshot.forEach((doc) => {\r\n                customersData.push(doc.data())\r\n            });\r\n            // Set all customers\r\n            setData(customersData);\r\n        });\r\n    }, []);        \r\n\r\n    // Defines culumns of table\r\n    const columns = React.useMemo(() =>\r\n    [\r\n        {  \r\n            Header: 'Email',  \r\n            accessor: 'email',\r\n            sortType: 'alphanumeric',\r\n        },{  \r\n            Header: 'Name',  \r\n            accessor: 'name',\r\n            sortType: 'alphanumeric',\r\n        },{  \r\n            Header: 'Phone Number',  \r\n            accessor: 'phoneNumber', \r\n            sortType: 'basic',\r\n        },{\r\n            Header: 'Actions',\r\n            id: 'click-me-button',\r\n            Cell: ({row}) => (\r\n                <div><Actions reports={reports} row={row} /></div>\r\n            )\r\n        }\r\n    ],\r\n    []\r\n    )  \r\n    \r\n    const defaultColumn = React.useMemo(() => ({\r\n        Filter: TextFilter,\r\n    }),[])\r\n       \r\n    // Defines the culumns and the data of the table\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n    } = useTable(\r\n        { columns, data, defaultColumn }, \r\n        useFilters,\r\n        useSortBy,\r\n    )\r\n        \r\n    return(\r\n        <>\r\n            {\r\n                data.length === 0 ? \r\n                    <div style={{display: 'flex', justifyContent: 'center'}}>\r\n                        <ReactLoading type='bubbles' color=\"#000066\" />\r\n                    </div>\r\n                :\r\n                    <div>\r\n                        <Table striped bordered responsive bsStyle=\"default\" {...getTableProps()}>\r\n                            <thead>\r\n                                {headerGroups.map(headerGroup => (\r\n                                    <tr {...headerGroup.getHeaderGroupProps()}>\r\n                                        {headerGroup.headers.map(column => (\r\n                                            <th {...column.getHeaderProps()}>\r\n                                                <div {...column.getSortByToggleProps()}>\r\n                                                    {column.render('Header')}\r\n                                                    <span>\r\n                                                        {/* Render the columns sort UI */}\r\n                                                        {column.isSorted ? (column.isSortedDesc ? ' ⬇️' : ' ⬆️') : ' ↕️'}\r\n                                                    </span>\r\n                                                </div>\r\n                                                {/* Render the columns filter UI */}\r\n                                                <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                                            </th>\r\n                                        ))}\r\n                                    </tr>\r\n                                ))}\r\n                            </thead>\r\n                            <tbody {...getTableBodyProps()}>\r\n                                {rows.map(row => {\r\n                                    prepareRow(row)\r\n                                    return (\r\n                                        <tr {...row.getRowProps()}>\r\n                                            {row.cells.map(cell => {\r\n                                            return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n\r\n                                            })}\r\n                                        </tr>\r\n                                    )\r\n                                })}\r\n                            </tbody>\r\n                        </Table>\r\n                        <>\r\n                        <Modal show={showModal} onHide={handleClose}>\r\n                            <Modal.Header closeButton>\r\n                                <Modal.Title>Delete</Modal.Title>\r\n                            </Modal.Header>\r\n                            <Modal.Body>Are you sure you want to delete {Row.name}?\r\n                            </Modal.Body>\r\n                            <Modal.Footer>\r\n                                <Button variant=\"secondary\" onClick={handleClose}>\r\n                                Cancel\r\n                                </Button>\r\n                                <Button variant=\"primary\" onClick={handleDelete}>\r\n                                Yes\r\n                                </Button>\r\n                            </Modal.Footer>\r\n                        </Modal>\r\n                        </>\r\n                    </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withRouter(CustomersTable);\r\n\r\n\r\n","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\CallRecord.js",["223"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./CallRecord.css\"\r\nimport firebase from './../firebase.js';\r\n\r\n\r\nfunction CallRecord(props) {\r\n    const [name, setName] = useState('')\r\n    \r\n    useEffect(() => {\r\n        // retrieving the client name that participated in the call\r\n        var db = firebase.firestore();\r\n        db.collection(\"customers\")\r\n        .doc(props.call.customer_id)\r\n        .get()\r\n        .then((doc)=>{\r\n            setName(doc.data().name)\r\n        });\r\n    },[]);\r\n\r\n    return(\r\n        <div class='call' key={props.call.customer_id} style={{borderBottom: '2px solid #0044cc',borderRadius: '4px', width:'50%', 'marginLeft': 'auto', 'marginRight': 'auto', marginBottom:'10px'}}>\r\n            <a style={{textDecoration: 'none', color: 'black'}} class=\"link-unstyled\" href={`/call_details/${props.call.id}`}>  \r\n                <div className='flex-container' style={{'position': 'relative'}}>\r\n                    <h6 className='responsive' style={{color:'gray', 'position': 'absolute', 'right': '0'}}>{props.call.date}</h6>\r\n                    <h3 className='responsive' style={{textAlign:'left'}}>{name}</h3>\r\n                </div>\r\n            </a>\r\n        </div>\r\n    ) \r\n}\r\n\r\nexport default CallRecord","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\AddCustomer.js",[],"C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\AddCallRecord.js",["224","225","226","227","228","229","230"],"import React, { useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport firebase from './../firebase.js';\r\n\r\nexport default function FormDialog(props) {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  // Customer ID\r\n  const [customerId,] = useState(props.dataFromParentId);\r\n  const [agentId,] = useState(localStorage.getItem(\"agent_id\"));\r\n\r\n  // Current Date\r\n  const [currentDate,] = useState(new Date())\r\n\r\n  // Keep the value of the TextField\r\n  const [interest, setInterest] = useState('');\r\n  const [purchased, setPurchased] = useState([]);\r\n  const [support, setSupport] = useState('');\r\n\r\n  // Handle on click button\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  // Validate form\r\n  const [PurchaseNotExist, setPurchaseNotExist] = useState(false);\r\n  const [PurchaseSold, setPurchaseSold] = useState(false);\r\n\r\n  // For Switch\r\n  const [checked, setChecked] = React.useState(false);\r\n\r\n  const toggleChecked = () => {\r\n    setChecked(prev => !prev);\r\n  };\r\n  \r\n  const handleCancel = (event) => {\r\n    event.preventDefault();\r\n    setOpen(false);\r\n    setPurchaseNotExist(false)\r\n    setPurchaseSold(false)\r\n  }\r\n\r\n  const handleSubmit = (event) => {\r\n\r\n    event.preventDefault();\r\n    let formatDate = currentDate.getFullYear() + '/' + \"\"+(Number(currentDate.getMonth())+1) + '/' + currentDate.getDate()\r\n    var db = firebase.firestore();\r\n    \r\n    // Check if the apartments exist\r\n    var flag = false\r\n    var reloadFlag = false\r\n    var count = 0\r\n\r\n    // Checks if the customer did not purchase anything\r\n    if (Object.keys(purchased).length == 0) {\r\n      setOpen(false);\r\n\r\n      // Create call_record Collection\r\n      db.collection(\"call_records\").doc().set({\r\n        agent_id: agentId,\r\n        customer_id: customerId,\r\n        date: formatDate,\r\n        interested: interest,\r\n        purchased: purchased,\r\n        support: support,\r\n        return: checked\r\n      }).then(() => {\r\n        window.location.reload();\r\n      })\r\n      setInterest('');\r\n      setPurchased([])\r\n      setSupport('');\r\n      setChecked(false)\r\n    }\r\n    else{\r\n\r\n      for(var i=0; i<purchased.length; i++){\r\n        db.collection(\"products\")\r\n        .doc(purchased[i])\r\n        .get()\r\n        .then((doc) => {\r\n          count ++\r\n          // if apartment doesn't exist, \r\n          if (!doc.exists){ \r\n            setPurchaseNotExist(true)\r\n            setPurchaseSold(false)\r\n            setPurchased([])\r\n            flag = true\r\n          }\r\n          \r\n          else{\r\n            //if apartment is sold out\r\n            if (doc.data().sold){\r\n              setPurchaseSold(true)\r\n              setPurchaseNotExist(false)\r\n              setPurchased([])\r\n              flag = true\r\n            }\r\n\r\n            // Checks if all the apartments exist => close dialog\r\n            if(count == purchased.length && !flag){\r\n              for(var i=0; i<purchased.length; i++){\r\n                db.collection(\"products\")\r\n                .doc(purchased[i])\r\n                .update({\r\n                  sold: 'Yes'\r\n                })\r\n              }\r\n              setOpen(false);\r\n\r\n              // Create call_record Collection\r\n              db.collection(\"call_records\").doc().set({\r\n                agent_id: agentId,\r\n                customer_id: customerId,\r\n                date: formatDate,\r\n                interested: interest,\r\n                purchased: purchased,\r\n                support: support,\r\n                return: checked\r\n              })\r\n              reloadFlag = true // need to reload the page\r\n              setInterest('');\r\n              setPurchased([])\r\n              setSupport('');\r\n              setChecked(false)\r\n              setPurchaseNotExist(false)\r\n              setPurchaseSold(false)\r\n            }\r\n          }\r\n        }).then(() => {\r\n          if(reloadFlag){\r\n            window.location.reload();\r\n          }\r\n        });\r\n      } \r\n    }\r\n  };\r\n\r\n  function validateForm() {\r\n    return !PurchaseNotExist && !PurchaseSold && /\\s/.test(purchased) == false && interest != '';\r\n  }\r\n\r\n  function handleChange() {\r\n    setPurchaseNotExist(false)\r\n    setPurchaseSold(false)\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>Add Call Record</Button>\r\n      <Dialog open={open} onClose={handleCancel} onChange={handleChange} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle id=\"form-dialog-title\">Call Record Details</DialogTitle>\r\n        <DialogContent>            \r\n            <TextField\r\n                autoFocus\r\n                margin=\"dense\"\r\n                id=\"name\"\r\n                label=\"Interested in ...\"\r\n                helperText=\"Required field *\"\r\n                type=\"text\"\r\n                fullWidth\r\n                onChange={(event) => setInterest(event.target.value)}\r\n            />\r\n            <TextField\r\n                margin=\"dense\"\r\n                id=\"name\"\r\n                label=\"Products purchased\"\r\n                error={PurchaseNotExist || PurchaseSold}\r\n                helperText={PurchaseNotExist ? 'The purchase entered doesn’t match any apartment id.' : PurchaseSold? 'The purchase entered is sold out.':'Write each purchase in a new line'}\r\n                type=\"text\"\r\n                fullWidth\r\n                multiline\r\n                onChange={(event) => {\r\n                    var res = event.target.value\r\n                    res = res.split(\"\\n\")\r\n                    setPurchased(res)\r\n                    setPurchaseNotExist(false)\r\n                    setPurchaseSold(false)\r\n                  }\r\n                }\r\n            />\r\n            <TextField\r\n                margin=\"dense\"\r\n                id=\"name\"\r\n                onChange={event => setSupport(event.target.value)}\r\n                label=\"Support\"\r\n                type=\"phone\"\r\n                fullWidth\r\n            />\r\n            <br></br>\r\n            <br></br>\r\n            <DialogContentText>Do return to customer?</DialogContentText>\r\n            <FormGroup>\r\n                <FormControlLabel control={<Switch checked={checked} onChange={toggleChecked} />} label=\"YES\" />\r\n            </FormGroup>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleSubmit} color=\"primary\" disabled={!validateForm()}>\r\n            Submit\r\n          </Button>\r\n          <Button onClick={handleCancel} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\CustomerCallRecord.js",["231"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./CallRecord.css\"\r\nimport firebase from './../firebase.js';\r\n\r\nfunction CallRecord(props) {\r\n\r\n    const [, setName] = useState('')\r\n    const [interested, setInterested] = useState('')\r\n\r\n    // Retrive the customer name\r\n    useEffect(() => {\r\n        var db = firebase.firestore();\r\n        db.collection(\"customers\")\r\n        .doc(props.call.customer_id)\r\n        .get()\r\n        .then((doc)=>{\r\n            setName(doc.data().name)\r\n        });\r\n\r\n        //Reduce interested detailes for design\r\n        if(props.call.interested.length > 3){\r\n            setInterested(props.call.interested.split(' ').slice(0,2).join(' ').concat('...'))\r\n        }\r\n        else{\r\n            setInterested(props.call.interested.concat('...'))\r\n        }\r\n    },[]);\r\n\r\n    return(\r\n        <div class='call' key={props.call.customer_id} style={{borderBottom: '2px solid #0044cc',borderRadius: '4px', width:'70%', 'marginLeft': 'auto', 'marginRight': 'auto', marginBottom:'10px'}}>\r\n            <a style={{textDecoration: 'none', color: 'black'}} class=\"link-unstyled\" href={`/call_details/${props.call.id}`}>  \r\n                <div className='flex-container' style={{'position': 'relative'}}>\r\n                    <h8 className=\"side-title\" style={{color:'gray', 'position': 'absolute', 'right': '0'}}>Interested: {interested}</h8>\r\n                    <h4 className=\"main-title\" style={{textAlign:'left'}}>{props.call.date}</h4>\r\n                </div>\r\n            </a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CallRecord","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\Purchase.js",["232","233"],"import React, { useState, useEffect } from \"react\";\r\nimport firebase from './../firebase.js';\r\nimport './Purchase.css'\r\n\r\n// Component to specific purchase\r\nfunction Purchase(props) {\r\n    const [customerName, setCustomerName] = useState([]);\r\n    const [agentName, setAgentName] = useState([]);\r\n    const [price, setPrice] = useState('');\r\n    const [apartmentId, setApartmentId] = useState('');\r\n    const [location, setLocation] = useState('');\r\n\r\n    useEffect(() => {\r\n        // Get the previous call record id from localStorage\r\n        var prev_call_id = localStorage.getItem(\"prev_call_id\")\r\n        var index = 0\r\n        var db = firebase.firestore();\r\n\r\n        // In case that purchased several products in the same call record\r\n        if(props.purchase.id == prev_call_id){\r\n            index ++ // Show the purchase in the 'index' place\r\n        }\r\n\r\n        // In case that purchased one products in the call record\r\n        else{\r\n            index = 0\r\n            localStorage.setItem('prev_call_id', props.purchase.id)\r\n        }\r\n\r\n        // Gets the product details\r\n        db.collection(\"products\")\r\n        .doc(props.purchase.purchased[index])\r\n        .get()\r\n        .then((snapshot)=>{\r\n          setApartmentId(snapshot.data().id)\r\n          setPrice(snapshot.data().price)\r\n          setLocation(snapshot.data().location)\r\n        });\r\n\r\n        // Gets the customer name\r\n        db.collection(\"customers\")\r\n        .doc(props.purchase.customer_id)\r\n        .get()\r\n        .then((snapshot)=>{\r\n            setCustomerName(snapshot.data().name)\r\n\r\n            // Gets the agent name\r\n            db.collection(\"agents\")\r\n            .doc(props.purchase.agent_id)\r\n            .get()\r\n            .then((snapshot)=>{\r\n                setAgentName(snapshot.data().name)\r\n            });\r\n        });  \r\n    },[]);\r\n    \r\n    return(\r\n        <div class='purchase' key={props.purchase.customer_id} style={{borderRadius: '8px', border: '2px solid #0044cc', borderStyle: 'inset', marginLeft: '50px', marginRight: '50px'}}>\r\n            <div style={{textDecoration: 'none', color: 'black'}} class=\"link-unstyled\">\r\n                <div className='Details' ><div className='key' style={{}}>Apartment ID: </div><div className='value'>{apartmentId}</div></div>\r\n                <div className='Details' ><div className='key' style={{}}>Location:  </div><div className='value'>{location}</div></div>\r\n                <div className='Details' ><div className='key' style={{}}>Price: </div><div className='value'>{price}</div></div>\r\n                <div className='Details' ><div className='key' style={{}}>Client: </div><div className='value'>{customerName}</div></div>\r\n                <div className='Details' ><div className='key' style={{}}>Agent: </div><div className='value'>{agentName}</div></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Purchase","C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\Image.js",[],"C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\SmallImages.js",[],"C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\Location.js",[],"C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\Sold.js",[],"C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\Price.js",[],"C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\components\\SmallImage.js",[],"C:\\Users\\user\\Desktop\\CRM\\CRM\\src\\canvasjs.min.js",[],{"ruleId":"234","severity":1,"message":"235","line":23,"column":47,"nodeType":"236","messageId":"237","endLine":23,"endColumn":48},{"ruleId":"234","severity":1,"message":"235","line":29,"column":38,"nodeType":"236","messageId":"237","endLine":29,"endColumn":39},{"ruleId":"238","severity":1,"message":"239","line":30,"column":5,"nodeType":"240","endLine":30,"endColumn":7,"suggestions":"241"},{"ruleId":"242","severity":1,"message":"243","line":88,"column":231,"nodeType":"244","messageId":"245","endLine":88,"endColumn":234},{"ruleId":"242","severity":1,"message":"243","line":83,"column":235,"nodeType":"244","messageId":"245","endLine":83,"endColumn":238},{"ruleId":"246","severity":1,"message":"247","line":62,"column":33,"nodeType":"248","endLine":62,"endColumn":149},{"ruleId":"246","severity":1,"message":"247","line":66,"column":33,"nodeType":"248","endLine":66,"endColumn":155},{"ruleId":"246","severity":1,"message":"247","line":72,"column":33,"nodeType":"248","endLine":72,"endColumn":151},{"ruleId":"246","severity":1,"message":"247","line":78,"column":33,"nodeType":"248","endLine":78,"endColumn":153},{"ruleId":"249","severity":1,"message":"250","line":15,"column":12,"nodeType":"251","messageId":"252","endLine":15,"endColumn":25},{"ruleId":"253","severity":1,"message":"254","line":65,"column":33,"nodeType":"236","messageId":"245","endLine":65,"endColumn":35},{"ruleId":"255","severity":1,"message":"256","line":8,"column":5,"nodeType":"257","messageId":"258","endLine":10,"endColumn":6},{"ruleId":"238","severity":1,"message":"259","line":86,"column":4,"nodeType":"240","endLine":86,"endColumn":6,"suggestions":"260"},{"ruleId":"249","severity":1,"message":"261","line":34,"column":13,"nodeType":"251","messageId":"252","endLine":34,"endColumn":14},{"ruleId":"249","severity":1,"message":"262","line":35,"column":13,"nodeType":"251","messageId":"252","endLine":35,"endColumn":14},{"ruleId":"253","severity":1,"message":"254","line":42,"column":30,"nodeType":"236","messageId":"245","endLine":42,"endColumn":32},{"ruleId":"238","severity":1,"message":"263","line":24,"column":24,"nodeType":"264","endLine":24,"endColumn":34},{"ruleId":"253","severity":1,"message":"254","line":51,"column":29,"nodeType":"236","messageId":"245","endLine":51,"endColumn":31},{"ruleId":"253","severity":1,"message":"265","line":42,"column":47,"nodeType":"236","messageId":"245","endLine":42,"endColumn":49},{"ruleId":"242","severity":1,"message":"266","line":49,"column":117,"nodeType":"244","messageId":"245","endLine":49,"endColumn":125},{"ruleId":"238","severity":1,"message":"267","line":49,"column":8,"nodeType":"240","endLine":49,"endColumn":10,"suggestions":"268"},{"ruleId":"249","severity":1,"message":"269","line":23,"column":28,"nodeType":"251","messageId":"252","endLine":23,"endColumn":45},{"ruleId":"238","severity":1,"message":"270","line":62,"column":8,"nodeType":"240","endLine":62,"endColumn":10,"suggestions":"271"},{"ruleId":"253","severity":1,"message":"265","line":14,"column":60,"nodeType":"236","messageId":"245","endLine":14,"endColumn":62},{"ruleId":"272","severity":1,"message":"273","line":1,"column":1,"nodeType":"274","messageId":"245","fix":"275"},{"ruleId":"249","severity":1,"message":"276","line":2,"column":8,"nodeType":"251","messageId":"252","endLine":2,"endColumn":20},{"ruleId":"249","severity":1,"message":"277","line":3,"column":8,"nodeType":"251","messageId":"252","endLine":3,"endColumn":14},{"ruleId":"249","severity":1,"message":"278","line":7,"column":10,"nodeType":"251","messageId":"252","endLine":7,"endColumn":14},{"ruleId":"249","severity":1,"message":"279","line":7,"column":16,"nodeType":"251","messageId":"252","endLine":7,"endColumn":19},{"ruleId":"249","severity":1,"message":"280","line":7,"column":21,"nodeType":"251","messageId":"252","endLine":7,"endColumn":24},{"ruleId":"249","severity":1,"message":"281","line":7,"column":26,"nodeType":"251","messageId":"252","endLine":7,"endColumn":31},{"ruleId":"249","severity":1,"message":"282","line":7,"column":33,"nodeType":"251","messageId":"252","endLine":7,"endColumn":42},{"ruleId":"249","severity":1,"message":"283","line":8,"column":10,"nodeType":"251","messageId":"252","endLine":8,"endColumn":14},{"ruleId":"249","severity":1,"message":"284","line":9,"column":8,"nodeType":"251","messageId":"252","endLine":9,"endColumn":17},{"ruleId":"249","severity":1,"message":"285","line":10,"column":8,"nodeType":"251","messageId":"252","endLine":10,"endColumn":9},{"ruleId":"286","severity":1,"message":"287","line":23,"column":13,"nodeType":"288","endLine":23,"endColumn":23},{"ruleId":"249","severity":1,"message":"289","line":32,"column":15,"nodeType":"251","messageId":"252","endLine":32,"endColumn":20},{"ruleId":"249","severity":1,"message":"290","line":3,"column":8,"nodeType":"251","messageId":"252","endLine":3,"endColumn":16},{"ruleId":"249","severity":1,"message":"291","line":4,"column":8,"nodeType":"251","messageId":"252","endLine":4,"endColumn":13},{"ruleId":"253","severity":1,"message":"254","line":25,"column":16,"nodeType":"236","messageId":"245","endLine":25,"endColumn":18},{"ruleId":"238","severity":1,"message":"292","line":162,"column":5,"nodeType":"240","endLine":162,"endColumn":7,"suggestions":"293"},{"ruleId":"238","severity":1,"message":"294","line":18,"column":7,"nodeType":"240","endLine":18,"endColumn":9,"suggestions":"295"},{"ruleId":"234","severity":1,"message":"235","line":55,"column":54,"nodeType":"236","messageId":"237","endLine":55,"endColumn":55},{"ruleId":"253","severity":1,"message":"265","line":64,"column":39,"nodeType":"236","messageId":"245","endLine":64,"endColumn":41},{"ruleId":"296","severity":1,"message":"297","line":90,"column":15,"nodeType":"298","messageId":"299","endLine":139,"endColumn":10},{"ruleId":"253","severity":1,"message":"265","line":110,"column":22,"nodeType":"236","messageId":"245","endLine":110,"endColumn":24},{"ruleId":"296","severity":1,"message":"300","line":139,"column":17,"nodeType":"298","messageId":"299","endLine":143,"endColumn":10},{"ruleId":"253","severity":1,"message":"265","line":149,"column":71,"nodeType":"236","messageId":"245","endLine":149,"endColumn":73},{"ruleId":"253","severity":1,"message":"254","line":149,"column":92,"nodeType":"236","messageId":"245","endLine":149,"endColumn":94},{"ruleId":"238","severity":1,"message":"301","line":27,"column":7,"nodeType":"240","endLine":27,"endColumn":9,"suggestions":"302"},{"ruleId":"253","severity":1,"message":"265","line":20,"column":30,"nodeType":"236","messageId":"245","endLine":20,"endColumn":32},{"ruleId":"238","severity":1,"message":"303","line":55,"column":7,"nodeType":"240","endLine":55,"endColumn":9,"suggestions":"304"},"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'date'. Either include it or remove the dependency array. You can also do a functional update 'setDate(d => ...)' if you only need 'date' in the 'setDate' call.","ArrayExpression",["305"],"no-dupe-keys","Duplicate key 'top'.","ObjectExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'img_instegram' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","React Hook useEffect has a missing dependency: 'flagToggle'. Either include it or remove the dependency array.",["306"],"'x' is assigned a value but never used.","'y' is assigned a value but never used.","Assignments to the 'tmp_call' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","Expected '===' and instead saw '=='.","Duplicate key 'fontSize'.","React Hook useEffect has a missing dependency: 'aptID'. Either include it or remove the dependency array.",["307"],"'setCorrectDetails' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'aptID' and 'db'. Either include them or remove the dependency array.",["308"],"unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program",{"range":"309","text":"310"},"'ReactToPrint' is defined but never used.","'Button' is defined but never used.","'Form' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Table' is defined but never used.","'Container' is defined but never used.","'span' is defined but never used.","'PropTypes' is defined but never used.","'$' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'style' is assigned a value but never used.","'Location' is defined but never used.","'Price' is defined but never used.","React Hook React.useMemo has a missing dependency: 'reports'. Either include it or remove the dependency array.",["311"],"React Hook useEffect has a missing dependency: 'props.call.customer_id'. Either include it or remove the dependency array.",["312"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'count', 'flag', 'flag', 'count', 'flag', 'reloadFlag'.","ArrowFunctionExpression","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'reloadFlag'.","React Hook useEffect has missing dependencies: 'props.call.customer_id' and 'props.call.interested'. Either include them or remove the dependency array. If 'setInterested' needs the current value of 'props.call.interested', you can also switch to useReducer instead of useState and read 'props.call.interested' in the reducer.",["313"],"React Hook useEffect has missing dependencies: 'props.purchase.agent_id', 'props.purchase.customer_id', 'props.purchase.id', and 'props.purchase.purchased'. Either include them or remove the dependency array.",["314"],{"desc":"315","fix":"316"},{"desc":"317","fix":"318"},{"desc":"319","fix":"320"},{"desc":"321","fix":"322"},[-1,0],"",{"desc":"323","fix":"324"},{"desc":"325","fix":"326"},{"desc":"327","fix":"328"},{"desc":"329","fix":"330"},"Update the dependencies array to be: [date]",{"range":"331","text":"332"},"Update the dependencies array to be: [flagToggle]",{"range":"333","text":"334"},"Update the dependencies array to be: [aptID]",{"range":"335","text":"336"},"Update the dependencies array to be: [aptID, db]",{"range":"337","text":"338"},"Update the dependencies array to be: [reports]",{"range":"339","text":"340"},"Update the dependencies array to be: [props.call.customer_id]",{"range":"341","text":"342"},"Update the dependencies array to be: [props.call.customer_id, props.call.interested]",{"range":"343","text":"344"},"Update the dependencies array to be: [props.purchase.agent_id, props.purchase.customer_id, props.purchase.id, props.purchase.purchased]",{"range":"345","text":"346"},[1010,1012],"[date]",[2485,2487],"[flagToggle]",[1632,1634],"[aptID]",[2298,2300],"[aptID, db]",[5538,5540],"[reports]",[507,509],"[props.call.customer_id]",[813,815],"[props.call.customer_id, props.call.interested]",[1842,1844],"[props.purchase.agent_id, props.purchase.customer_id, props.purchase.id, props.purchase.purchased]"]